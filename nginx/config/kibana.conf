upstream kibana {
  server kibana:5601;
}


server {
  listen 8080;
  server_name localhost;

  set $proxy_pass_url http://kibana;

  location / {

    set $operation $request_method;
    
    if ( $operation = "DELETE" ) {
      return 403 '{"error": "$request_method $request_uri operation not allowed"}';
      break;
    }

    if ( $operation = "PUT" ) {
      return 403 '{"error": "$request_method $request_uri operation not allowed"}';
      break;
    }

    #  Restrict users from creating/editing/deleting search queries, visualizations
    #  and dashboards
    if ( $request_uri ~ /api/saved_objects/(search|visualization|dashboard).* ) {
      set $operation "${operation}-api-saved-objects-denied-sections";
    }
    if ( $operation = "POST-api-saved-objects-denied-sections" ) {
      return 403 '{"error": "$request_method $request_uri operation not allowed"}';
      break;
    }

    # Restrict users from creating index patterns
    if ( $request_uri ~ /api/saved_objects/index-pattern.* ) {
      set $operation "${operation}-index-patterns";
    }
    if ( $operation = "POST-index-patterns" ) {
      return 403 '{"error": "$request_method $request_uri operation not allowed"}';
      break;
    }
    
    # Restrict users from carrying out destructive operations
    # through Dev Tools
    if ( $request_uri ~ /api/console/proxy.*method=DELETE ) {
      return 403 '{"error": "$request_method $request_uri operation not allowed"}';
      break;
    }
    if ( $request_uri ~ /api/console/proxy.*method=PUT) {
      return 403 '{"error": "$request_method $request_uri operation not allowed"}';
      break;
    }
    if ( $request_uri ~ /api/console/proxy.*method=POST) {
      return 403 '{"error": "$request_method $request_uri operation not allowed"}';
      break;
    }

    # Restrict users from changing Kibana settings through 
    # the management console
    if ( $request_uri ~ /api/kibana/settings.* ) {
      return 403 '{"error": "$request_method $request_uri operation not allowed"}';
      break;
    }

    auth_basic "Kibana read-only users";
    auth_basic_user_file /etc/nginx/kibana-read-only-users.auth;
   
    proxy_pass $proxy_pass_url;
    include /etc/nginx/conf.d/kibana-proxy-params.conf;

  }

}

server {
  listen 8081;
  server_name localhost;

  set $proxy_pass_url http://kibana;

  location / {

    set $operation $request_method;

    # Restrict users from carrying out destructive operations
    # through Dev Tools
    if ( $request_uri ~ /api/console/proxy.*method=DELETE ) {
      return 403 '{"error": "$request_method $request_uri operation not allowed"}';
      break;
    }
    if ( $request_uri ~ /api/console/proxy.*method=PUT) {
      return 403 '{"error": "$request_method $request_uri operation not allowed"}';
      break;
    }
    if ( $request_uri ~ /api/console/proxy.*method=POST) {
      return 403 '{"error": "$request_method $request_uri operation not allowed"}';
      break;
    }

    # Restrict users from changing Kibana settings through 
    # the management console
    if ( $request_uri ~ /api/kibana/settings.* ) {
      set $operation "${operation}-kibana-settings";
    }
    if ( $operation = "POST-kibana-settings" ) {
      return 403 '{"error": "$request_method $request_uri operation not allowed"}';
      break;
    }

    # Restrict users from deleting index patterns
    if ( $request_uri ~ /api/saved_objects/index-pattern.* ) {
      set $operation "${operation}-index-patterns";
    }
    if ( $operation = "DELETE-index-patterns" ) {
      return 403 '{"error": "$request_method $request_uri operation not allowed"}';
      break;
    }

    auth_basic "Kibana normal users";
    auth_basic_user_file /etc/nginx/kibana-normal-users.auth;

    proxy_pass $proxy_pass_url;
    include /etc/nginx/conf.d/kibana-proxy-params.conf;

  }

}

server {
  listen 8082;
  server_name localhost;

  set $proxy_pass_url http://kibana;

  location / {

    auth_basic "Kibana admins";
    auth_basic_user_file /etc/nginx/kibana-admin-users.auth;

    proxy_pass $proxy_pass_url;
    include /etc/nginx/conf.d/kibana-proxy-params.conf;

  }
}
